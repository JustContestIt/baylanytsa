# ---------- BASE ----------
FROM node:22-alpine AS base
WORKDIR /app
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# ---------- DEPS (устанавливаем зависимости и генерим Prisma Client) ----------
FROM base AS deps
COPY package.json package-lock.json* pnpm-lock.yaml* .npmrc* ./
# Если используешь npm:
RUN if [ -f package-lock.json ]; then npm ci --no-audit --no-fund; else npm i --no-audit --no-fund; fi
COPY prisma ./prisma
RUN npx prisma generate

# ---------- BUILD (собираем TypeScript) ----------
FROM deps AS build
COPY tsconfig*.json ./
COPY src ./src
# Если есть скрипт build — используем его; иначе tsc напрямую
RUN npm run build || npx tsc

# ---------- RUNTIME ----------
FROM node:22-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV PORT=4000
# Копируем только то, что нужно в рантайме
COPY --from=deps /app/node_modules ./node_modules
COPY --from=build /app/dist ./dist
COPY prisma ./prisma

# health endpoint (опционально реализуй /health)
EXPOSE 4000

# Применять миграции на старте (если нужно) — оставь закомментировано, если prisma в devDeps
# CMD ["sh", "-c", "npx prisma migrate deploy && node dist/index.js"]

CMD ["node", "dist/index.js"]
