generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  username     String   @unique
  displayName  String?
  bio          String?
  createdAt    DateTime @default(now())

  posts              Post[]
  comments           Comment[]
  likes              Like[]
  following          Follow[]       @relation("following")
  followers          Follow[]       @relation("followers")
  notifications      Notification[] @relation("notificationsForUser")
  actorNotifications Notification[] @relation("notificationsByActor")
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String
  createdAt DateTime @default(now())

  likes         Like[]
  comments      Comment[]
  notifications Notification[]

  @@index([authorId])
  @@index([createdAt])
}

model Like {
  id      String @id @default(cuid())
  userId  String
  postId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  authorId  String
  postId    String
  content   String
  createdAt DateTime @default(now())

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([authorId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  
  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  actorId   String
  postId    String?
  type      String   // "LIKE" | "COMMENT" | "FOLLOW"
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  user  User  @relation("notificationsForUser", fields: [userId], references: [id], onDelete: Cascade)
  actor User  @relation("notificationsByActor", fields: [actorId], references: [id], onDelete: Cascade)
  post  Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([userId, createdAt])
}